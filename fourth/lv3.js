// var a = {n:1}：创建一个对象字面量 {n:1} 并将其赋值给变量 a。此时 a 指向这个新对象。

// var b = a：将变量 a 的值（即对象 {n:1} 的引用）赋值给变量 b。此时 a 和 b 都指向同一个对象。

// a.x = a = {n:2}：这里涉及到赋值和点运算符的优先级。根据JavaScript的运算符优先级，点运算符 . 的优先级高于赋值 =。因此，这个表达式首先计算 a.x（此时 a 仍然指向 {n:1}），然后尝试给 a.x 赋值，但由于 a.x 未定义，实际上是给对象 {n:1} 添加了一个新属性 x，其值为 a 的当前引用（即 {n:1}）。然后，a 被赋值为 {n:2}，这意味着 a 现在指向了一个新的对象 {n:2}。

// 此时，对象 {n:1} 现在有两个引用：b 和 a.x。
// a 指向了新对象 {n:2}。
// console.log(a)：输出 a 的值，即 {n:2}。

// console.log(b)：输出 b 的值，由于 b 仍然指向原来的对象 {n:1}，所以输出 {n:1}。

// a.n = 3：修改 a 指向的对象 {n:2} 的 n 属性值为 3。由于 a 和 b 指向不同的对象，这个操作不会影响 b 指向的对象。

// console.log(b)：再次输出 b 的值，由于 b 指向的对象没有被修改，所以输出仍然是 {n:1}。

// 综上所述，输出结果为：

// {n: 2}
// {n: 1}
// {n: 1}